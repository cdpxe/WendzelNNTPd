; WendzelNNTPd default configuration file
;
; Please note:
;     By default, SQLite instead of MySQL is used; no
;     authentication is activated and standard ports are used.
;     Also, the server listens only on the localhost interface
;     ("listen 127.0.0.1").

;;;;;;; Fundamental setup ;;;;;;;
; Specify a database engine. Currently supported are 'sqlite3'
; and 'mysql' as well as experimental support for 'postgres'.
database-engine sqlite3

;;;;;;; MySQL-specific parameters ;;;;;;;
; Your database hostname (not used in case of sqlite3).
database-server 127.0.0.1
; The database connection port (not used in case of sqlite3).
; Comment out to use the default port of your database engine.
database-port 3306
; Server authentication (not required for sqlite3)
database-username myuser
database-password mypass

;;;;;;; Network settings ;;;;;;;
; You need to specify the port _before_ using the 'listen' command!
; However, a mix like `port xyz, listen abc, port bca, listen zyb'
; should work fine, i.e., assigning different ports to different
; network interfaces.

<connector>
    ;; enables STARTTLS for this port
    ;enable-starttls
    port		119
    listen	    127.0.0.1
    ;; configure SSL server certificate
    ;tls-server-certificate "/usr/local/etc/ssl/server.crt"
    ;; configure SSL private key
    ;tls-server-key "/usr/local/etc/ssl/server.key"
    ;; configure SSL CA certificate
    ;tls-ca-certificate "/usr/local/etc/ssl/ca.crt"
    ;; configure TLS ciphers for TLSv1.3
    ;tls-cipher-suites "TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256"
    ;; configure TLS ciphers for TLSv1.1 and TLSv1.2
    ;tls-ciphers "ALL:!COMPLEMENTOFDEFAULT:!eNULL"
    ;; configure allowed TLS version (1.0-1.3)
    ;tls-version "1.2-1.3"
    ;; possibility to force the client to authenticate with client certificate (none | optional | require)
    ;tls-verify-client "required"
    ;; define depth for checking client certificate
    ;tls-verify-client-depth 0
    ;; possibility to use certificate revocation list (none | leaf | chain)
    ;tls-crl "none"
    ;tls-crl-file "/usr/local/etc/ssl/ssl.crl"
</connector>

<connector>
    ;; enables STARTTLS for this port
    ;enable-starttls
    port		119
    listen	    ::1
    ;; configure SSL server certificate
    ;tls-server-certificate "/usr/local/etc/ssl/server.crt"
    ;; configure SSL private key
    ;tls-server-key "/usr/local/etc/ssl/server.key"
    ;; configure SSL CA certificate
    ;tls-ca-certificate "/usr/local/etc/ssl/ca.crt"
    ;; configure TLS ciphers for TLSv1.3
    ;tls-cipher-suites "TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256"
    ;; configure TLS ciphers for TLSv1.1 and TLSv1.2
    ;tls-ciphers "ALL:!COMPLEMENTOFDEFAULT:!eNULL"
    ;; configure allowed TLS version (1.0-1.3)
    ;tls-version "1.2-1.3"
    ;; possibility to force the client to authenticate with client certificate (none | optional | require)
    ;tls-verify-client "required"
    ;; define depth for checking client certificate
    ;tls-verify-client-depth 0
    ;; possibility to use certificate revocation list (none | leaf | chain)
    ;tls-crl "none"
    ;tls-crl-file "/usr/local/etc/ssl/ssl.crl"
</connector>

<connector>
    ;; enables TLS for this port
    ;enable-tls
    port		563
    listen	    127.0.0.1
    ;; configure SSL server certificate (required)
    ;tls-server-certificate "/usr/local/etc/ssl/server.crt"
    ;; configure SSL private key (required)
    ;tls-server-key "/usr/local/etc/ssl/server.key"
    ;; configure SSL CA certificate (required)
    ;tls-ca-certificate "/usr/local/etc/ssl/ca.crt"
    ;; configure TLS ciphers for TLSv1.3
    ;tls-cipher-suites "TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256"
    ;; configure TLS ciphers for TLSv1.1 and TLSv1.2
    ;tls-ciphers "ALL:!COMPLEMENTOFDEFAULT:!eNULL"
    ;; configure allowed TLS version (1.0-1.3)
    ;tls-version "1.2-1.3"
    ;; possibility to force the client to authenticate with client certificate (none | optional | require)
    ;tls-verify-client "required"
    ;; define depth for checking client certificate
    ;tls-verify-client-depth 0
    ;; possibility to use certificate revocation list (none | leaf | chain)
    ;tls-crl "none"
    ;tls-crl-file "/usr/local/etc/ssl/ssl.crl"
</connector>

<connector>
    ;; enables TLS for this port
    ;enable-tls
    port		563
    listen	    ::1
    ;; configure SSL server certificate
    ;tls-server-certificate "/usr/local/etc/ssl/server.crt"
    ;; configure SSL private key
    ;tls-server-key "/usr/local/etc/ssl/server.key"
    ;; configure SSL CA certificate
    ;tls-ca-certificate "/usr/local/etc/ssl/ca.crt"
    ;; configure TLS ciphers for TLSv1.3
    ;tls-cipher-suites "TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256"
    ;; configure TLS ciphers for TLSv1.1 and TLSv1.2
    ;tls-ciphers "ALL:!COMPLEMENTOFDEFAULT:!eNULL"
    ;; configure allowed TLS version (1.0-1.3)
    ;tls-version "1.2-1.3"
    ;; possibility to force the client to authenticate with client certificate (none | optional | require)
    ;tls-verify-client "required"
    ;; define depth for checking client certificate
    ;tls-verify-client-depth 0
    ;; possibility to use certificate revocation list (none | leaf | chain)
    ;tls-crl "none"
    ;tls-crl-file "/usr/local/etc/ssl/ssl.crl"
</connector>

; Uncomment 'verbose-mode' if you want to find errors or if you
; have problems with the logging subsystem. All log strings are
; written to STDERR, too, if verbose-mode is activated.
; Additionally all commands sent by clients are written to STDERR
; (but not to the logfile).
;verbose-mode

;;;;;;; Advanced settings ;;;;;;;
; The max. allowed size of a single posting (in bytes). The
; default value is 20 MBytes (20*1024^2=20.971.520 Bytes).
max-size-of-postings 20971520

; Activate authentication.
;use-authentication

; Store the Message Body in the database (only possible
; with postgres!).
; !!! This setting should NOT be changed after initial utilization
; of the server as old message bodies would not be locatable
; anymore!
; Default: store the message body in the filesystem
;message-body-in-db

; Store/load the unique message index within the database
; system. (Only possible with postgres!)
; !!! This should NOT be changed after initial utilization of
; the server as the message counter would be corrupted otherwise!
; Deactivated by default.
;message-count-in-db

; If you activated authentication (above, using the keyword
; `use-authentication'), you can also activate the support for
; access control lists (ACL).
;use-acl

; This keyword prevents that IPs or hostnames will become part of
; the message ID generated by WendzelNNTPd (what is the default
; case). Uncomment `enable-anonym-mids' to enable this feature.
;enable-anonym-mids

; This keyword defines a salt to be used in conjunction with the
; passwords to calculate the cryptographic hashes. The salt must
; be in the form [a-zA-Z0-9.:\/-_]+.
; Please note that the final hash is calculated using
; salt+username+password as an input to prevent simple
; password-identification attacks when an equal password is used
; by >=2 users.
; ATTENTION: If you change the salt after passwords have been
; stored, they will be rendered invalid! If you comment out
; hash-salt, then the default hash salt defined in the source
; code will be used.
; You should change the default hash-salt value before first use!
hash-salt 0.hG4//3baA-::_\

